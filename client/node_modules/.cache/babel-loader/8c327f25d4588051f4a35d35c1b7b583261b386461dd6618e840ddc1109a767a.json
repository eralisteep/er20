{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var realOptions = __assign({\n    forwardRef: false\n  }, options);\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  var wrappedComponent = function (props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n  wrappedComponent.displayName = baseComponentName;\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  var memoComponent;\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}","map":{"version":3,"names":["forwardRef","memo","isUsingStaticRendering","useObserver","observer","baseComponent","options","realOptions","__assign","baseComponentName","displayName","name","wrappedComponent","props","ref","memoComponent","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","Object","keys","forEach","key","defineProperty","getOwnPropertyDescriptor"],"sources":["C:\\Users\\butabayev.yerali\\Documents\\GitHub\\er17\\client\\node_modules\\mobx-react-lite\\src\\observer.ts"],"sourcesContent":["import { forwardRef, memo } from \"react\"\r\n\r\nimport { isUsingStaticRendering } from \"./staticRendering\"\r\nimport { useObserver } from \"./useObserver\"\r\n\r\nexport interface IObserverOptions {\r\n    readonly forwardRef?: boolean\r\n}\r\n\r\nexport function observer<P extends object, TRef = {}>(\r\n    baseComponent: React.RefForwardingComponent<TRef, P>,\r\n    options: IObserverOptions & { forwardRef: true }\r\n): React.MemoExoticComponent<\r\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\r\n>\r\n\r\nexport function observer<P extends object>(\r\n    baseComponent: React.FunctionComponent<P>,\r\n    options?: IObserverOptions\r\n): React.FunctionComponent<P>\r\n\r\nexport function observer<\r\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\r\n    Options extends IObserverOptions\r\n>(\r\n    baseComponent: C,\r\n    options?: Options\r\n): Options extends { forwardRef: true }\r\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\r\n        ? C &\r\n              React.MemoExoticComponent<\r\n                  React.ForwardRefExoticComponent<\r\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\r\n                  >\r\n              >\r\n        : never /* forwardRef set for a non forwarding component */\r\n    : C & { displayName: string }\r\n\r\n// n.b. base case is not used for actual typings or exported in the typing files\r\nexport function observer<P extends object, TRef = {}>(\r\n    baseComponent: React.RefForwardingComponent<TRef, P> | React.FunctionComponent<P>,\r\n    options?: IObserverOptions\r\n) {\r\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\r\n    if (isUsingStaticRendering()) {\r\n        return baseComponent\r\n    }\r\n\r\n    const realOptions = {\r\n        forwardRef: false,\r\n        ...options\r\n    }\r\n\r\n    const baseComponentName = baseComponent.displayName || baseComponent.name\r\n\r\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\r\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\r\n    }\r\n    wrappedComponent.displayName = baseComponentName\r\n\r\n    // memo; we are not interested in deep updates\r\n    // in props; we assume that if deep objects are changed,\r\n    // this is in observables, which would have been tracked anyway\r\n    let memoComponent\r\n    if (realOptions.forwardRef) {\r\n        // we have to use forwardRef here because:\r\n        // 1. it cannot go before memo, only after it\r\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\r\n        //    since it wouldn't be a callable function anymore\r\n        memoComponent = memo(forwardRef(wrappedComponent))\r\n    } else {\r\n        memoComponent = memo(wrappedComponent)\r\n    }\r\n\r\n    copyStaticProperties(baseComponent, memoComponent)\r\n    memoComponent.displayName = baseComponentName\r\n\r\n    return memoComponent\r\n}\r\n\r\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\r\nconst hoistBlackList: any = {\r\n    $$typeof: true,\r\n    render: true,\r\n    compare: true,\r\n    type: true\r\n}\r\n\r\nfunction copyStaticProperties(base: any, target: any) {\r\n    Object.keys(base).forEach(key => {\r\n        if (!hoistBlackList[key]) {\r\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\r\n        }\r\n    })\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAU,EAAEC,IAAI,QAAQ,OAAO;AAExC,SAASC,sBAAsB,QAAQ,mBAAmB;AAC1D,SAASC,WAAW,QAAQ,eAAe;AAmC3C;AACA,OAAM,SAAUC,QAAQA,CACpBC,aAAiF,EACjFC,OAA0B;EAE1B;EACA,IAAIJ,sBAAsB,EAAE,EAAE;IAC1B,OAAOG,aAAa;;EAGxB,IAAME,WAAW,GAAAC,QAAA;IACbR,UAAU,EAAE;EAAK,GACdM,OAAO,CACb;EAED,IAAMG,iBAAiB,GAAGJ,aAAa,CAACK,WAAW,IAAIL,aAAa,CAACM,IAAI;EAEzE,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,KAAQ,EAAEC,GAAoB;IACpD,OAAOX,WAAW,CAAC;MAAM,OAAAE,aAAa,CAACQ,KAAK,EAAEC,GAAG,CAAC;IAAzB,CAAyB,EAAEL,iBAAiB,CAAC;EAC1E,CAAC;EACDG,gBAAgB,CAACF,WAAW,GAAGD,iBAAiB;EAEhD;EACA;EACA;EACA,IAAIM,aAAa;EACjB,IAAIR,WAAW,CAACP,UAAU,EAAE;IACxB;IACA;IACA;IACA;IACAe,aAAa,GAAGd,IAAI,CAACD,UAAU,CAACY,gBAAgB,CAAC,CAAC;GACrD,MAAM;IACHG,aAAa,GAAGd,IAAI,CAACW,gBAAgB,CAAC;;EAG1CI,oBAAoB,CAACX,aAAa,EAAEU,aAAa,CAAC;EAClDA,aAAa,CAACL,WAAW,GAAGD,iBAAiB;EAE7C,OAAOM,aAAa;AACxB;AAEA;AACA,IAAME,cAAc,GAAQ;EACxBC,QAAQ,EAAE,IAAI;EACdC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE;CACT;AAED,SAASL,oBAAoBA,CAACM,IAAS,EAAEC,MAAW;EAChDC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAC,UAAAC,GAAG;IACzB,IAAI,CAACV,cAAc,CAACU,GAAG,CAAC,EAAE;MACtBH,MAAM,CAACI,cAAc,CAACL,MAAM,EAAEI,GAAG,EAAEH,MAAM,CAACK,wBAAwB,CAACP,IAAI,EAAEK,GAAG,CAAE,CAAC;;EAEvF,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}